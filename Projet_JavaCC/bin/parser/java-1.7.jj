//test
/*
danson@grafidog.com: Modified to support Java 7:
- binary literals
- underscores in numeric literals
- strings in switch statements (no change needed)
- type inference for generic instance creation (no changes needed)
- improved compiler warnings and errors when using non-reifiable formal parameters with varargs methods (no changes needed)
- try with resources
- catching multiple exception types and rethrowing exceptions with improved type checking
    

Per Sreenivasa Viswanadha (as posted on the javacc user mailing list), the
original java 1.5 grammar is licensed under the BSD license, so this modified
grammar is also.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the <ORGANIZATION> nor the names of its contributors
    may be used to endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


options {
  JAVA_UNICODE_ESCAPE = true;
  //ERROR_REPORTING = true;
  STATIC = false;
  //DEBUG_PARSER = true;
}

PARSER_BEGIN(JavaParser)
package parser;

import java.io.*;  
import java.text.DecimalFormat;
import java.util.*;
import java.lang.*;


public class JavaParser
{
   private InputStream inputStream = null;

   //Pour differencier type public, private, ou protected.
   //potee = 1: public
   //potee = 2: private
   //potee = 3: protected
   public int portee;
   //cnt_Portee[0]: nombre d'attributs public
   //cnt_Portee[1]: nombre d'attributs private
   //cnt_Portee[2]: nombre d'attributs protected
   public int[] cnt_Portee = { 0, 0, 0};
   
   //Pour differencier type Simple ou Reference. Valeur est True par default.
   public boolean isSimple = true;
   //cnt_Attribut[0]: nombre d'attribut total
   //cnt_Attribut[1]: nombre d'attribut de type simple
   //cnt_Attribut[2]: nombre d'attribut reference
   public int[] cnt_Attributs = { 0, 0, 0};

   //Un ArrayList pour enregistrer les noms des associations.
   public ArrayList<String> asso = new ArrayList<String>();
   public StringBuilder sb = new StringBuilder("");

   public Map<String,String> att_class = new HashMap<String,String>();
   public Map<String,Integer> list_class = new HashMap<String,Integer>();
   public boolean add_list_class = true;
   
   public String att_class_name = "";
   
   //Quand le getter est true, on peut l'ajouter dans le Arraylist 'asso'
   public boolean asso_Getter = false;
   
   //Le nom de cette classe
   public String nom_Classe = "";
   //Distinguer la classe et les classe interne
   public boolean named = false;

   //Est-ce que la classe a une classe parent?
   public boolean hasParent = false;
   //Le nom de la classe Parent
   public String classe_Parent = "Pas de classe Parent";

   public String modifier = "";
   public static String folder_parent = "";
   public static ArrayList<String> permanent = new ArrayList<String>();
   public static Map<String,ArrayList<String>> permanent_class = new HashMap<String,ArrayList<String>>();
   public static StringBuffer infoClasse = new StringBuffer("");
   public static int i = 0;
   
    /**
     * Constructor for JavaParser.
     * @param fileName name of the file to parse
     */
   public JavaParser(String filename)
   {
      this(System.in);
      try {
          inputStream = new FileInputStream(new File(filename));
          ReInit(inputStream);
      }
      catch(Exception e) {
        e.printStackTrace();
      }
   }

   JavaParser(JavaCharStream stream) {
        jj_input_stream = stream;
        token_source = new JavaParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
   }

  /*
   * Returns true if the next token is not in the FOLLOW list of "expansion".
   * It is used to decide when the end of an "expansion" has been reached.
   */
  private boolean notTailOfExpansionUnit() {
    Token t;
    t = getToken(1);
    if (t.kind == BIT_OR || t.kind == COMMA || t.kind == RPAREN || t.kind == RBRACE || t.kind == RBRACKET) return false;
    return true;
  }

  public static void loopFile(File[] files) {
    	for (File file : files) {
    	  if (file.isDirectory()) {
    	    
    	    	permanent.clear();
                if(i == 1) {
                infoClasse.append("\n******************************** Next Folder *******************************\n" + "\n");
                infoClasse.append("Directory: " + file.getAbsolutePath() + "\n");
              }
              
                loopFile(file.listFiles()); // Calls same method again.
            } else {
                folder_parent = file.getParent().toString();
                analyseFile(new JavaParser(file.getAbsolutePath()));
            }
            
         }
  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                

  
  public static void analyseFile(JavaParser parser) {
      DecimalFormat df = new DecimalFormat("#%");
	 try {
	   parser.CompilationUnit();
	   if(i == 1) {
	      infoClasse.append("\n************************** File *************************\n" + "\n");
          infoClasse.append("Class Name : " + parser.nom_Classe + "\n");
          infoClasse.append("Class Parent : " + parser.classe_Parent + "\n");
          
          if(permanent_class.get(folder_parent).contains(parser.nom_Classe))
          	parser.permanent_class.get(folder_parent).remove(parser.nom_Classe);
          infoClasse.append("Classes Permanent : " + parser.permanent_class.get(parser.folder_parent) + "\n");
          parser.permanent_class.get(folder_parent).add(parser.nom_Classe);
          infoClasse.append("Nombre d'associations : " + parser.asso.size() + "\n");
          infoClasse.append("Associations : " + parser.asso.toString() + "\n");

          infoClasse.append("Nombre d'attribut total :" + parser.cnt_Attributs[0] + "\n");
          
          if(parser.cnt_Attributs[0] != 0)
          {
              infoClasse.append("------------------------------------------------------------" + "\n");
              infoClasse.append("Nombre d'attribut de type simple : " + parser.cnt_Attributs[1] + "\n");
              infoClasse.append("Pourcent d'attribut de type simple : "+ df.format((double)parser.cnt_Attributs[1]/parser.cnt_Attributs[0]) + "\n");
              infoClasse.append("------------------------------------------------------------" + "\n");
              infoClasse.append("Nombre d'attribut de reference : " + parser.cnt_Attributs[2] + "\n");
              infoClasse.append("Pourcent d'attribut reference : "+ df.format((double)parser.cnt_Attributs[2]/parser.cnt_Attributs[0]) + "\n");
              infoClasse.append("------------------------------------------------------------" + "\n");
              infoClasse.append("Nombre d'attribut public : " + parser.cnt_Portee[0] + "\n");
              infoClasse.append("Pourcent d'attribut public : "+ df.format((double)parser.cnt_Portee[0]/parser.cnt_Attributs[0]) + "\n");
              infoClasse.append("------------------------------------------------------------" + "\n");
              infoClasse.append("Nombre d'attribut private : " + parser.cnt_Portee[1] + "\n");
              infoClasse.append("Pourcent d'attribut private : " + df.format((double)parser.cnt_Portee[1]/parser.cnt_Attributs[0]) + "\n");
              infoClasse.append("------------------------------------------------------------" + "\n");
              infoClasse.append("Nombre d'attribut protected : " + parser.cnt_Portee[2] + "\n");
              infoClasse.append("Pourcent d'attribut protected : "+ df.format((double)parser.cnt_Portee[2]/parser.cnt_Attributs[0]) + "\n");
              infoClasse.append("------------------------------------------------------------" + "\n");
          }

    		 infoClasse.append("\n************************** Get list class *************************\n" + parser.list_class +"\n");
    		 infoClasse.append("------------------------------------------------------------" + "\n");

			 infoClasse.append("Java Parser Version 1.7:  Java program parsed and analysed successfully." + "\n");
    	}
        } catch (ParseException e) {
          System.out.println(e.getMessage());
          System.out.println("Java Parser Version 1.7:  Encountered errors during parse.");
        }
  }
  // Main method for testing, here is a one-liner bash script that can be ran from
  // the command line:
  // for f in /some/directory/full/of/java/files/*.java; do java -cp . JavaParser $f; done
  public static void main(String args[]) {
    JavaParser parser;

    if (args.length == 0) {
      System.out.println("Java Parser Version 1.7:  Reading from standard input...");
      parser = new JavaParser(System.in);
    } else if (args.length == 1) {
        try {
          File file = new File(args[0]);
	  if(file.isDirectory()){
         System.out.println("Directory: " + file.getAbsolutePath());
         for(int j = 0; j < 2; j++) {
           loopFile((new File(args[0]).listFiles()));
           if (i==1)
           	System.out.println(infoClasse);
           i++;
         }
	  }else{
       analyseFile(new JavaParser(new java.io.FileInputStream(args[0])));
	  }
      } catch (java.io.FileNotFoundException e) {
        System.out.println("Java Parser Version 1.7:  File " + args[0] + " not found.");
        return;
      }
    } else {
      System.out.println("Java Parser Version 1.7:  Usage is one of:");
      System.out.println("         java JavaParser < inputfile");
      System.out.println("OR");
      System.out.println("         java JavaParser inputfile");
      return;
    }

  }
}

PARSER_END(JavaParser)



/********************************************
 * THE JAVA TOKEN SPECIFICATION STARTS HERE *
 ********************************************/

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  /* danson, added backup(2) for special handling of single line comments at
  the end of a file, see <IN_SINGLE_LINE_COMMENT> special token below */
  "//" { input_stream.backup(2); } : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  /* this is the original, I've replaced with the next line to allow a single
  line comment at the end of a java file without a new line following the
  comment.  The java language specification says that single line comments
  must be followed by an end-of-line marker (see section 3.4), so this new rule
  relaxes that requirement slightly by allowing the line terminator to be
  optional.  This only makes sense when the comment is the last line of the
  source file, all other single line comments will have a line terminator. This
  request was posted as a bug against JBrowse, I don't see any problem with
  allowing it, especially since Sun's compiler doesn't complain. */
  /* <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT */
  < SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */
// DONE: Java 7 allows a binary literal.
// DONE: Java 7 allows underscores in numeric literals to improve readability, e.g. 
// long creditCardNumber = 1234_5678_9012_3456L;
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <BINARY_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] ((["_"])*["0"-"9"])* >      // Java 7 allows underscores
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])((["_"])*["0"-"9","a"-"f","A"-"F"])* >      // Java 7 allows underscores
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])((["_"])*["0"-"1"])* >   // new for Java 7, also allows underscores
|
  < #OCTAL_LITERAL: "0" ((["_"])*(["0"-"7"]))* >      // Java 7 allows underscores
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])((["_"])*(["0"-"9"]))* "." ((["0"-"9"])((["_"])*(["0"-"9"]))*)* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])((["_"])*(["0"-"9"]))* (<EXPONENT>)? ["f","F","d","D"]
  >
  
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < POINTER: "->" >
| < DIAMOND: "<>" >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT: ">>>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
     input_stream.backup(2);
  }
| < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
  }
| < GT: ">" >
}





/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/**
 * Main entry point for parsing java files.
 */
void CompilationUnit():
{
}
{
      (
          
           [ LOOKAHEAD(2) PackageDeclaration() ]
           ( ImportDeclaration() )*
           (
             TypeDeclaration()
           )*
           
           <EOF>
       )
}


void PackageDeclaration():
{
}
{
    
        <PACKAGE> Name() ";"  
}

void  ImportDeclaration():
{
}
{
    
        <IMPORT> [ <STATIC> ] Name() [ "." "*" ] ";"
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 * danson: the downside is this allows modifiers that aren't allowed
 * in some constructs. 
 * TODO: write productions for the actual modifiers allowed for each construct.
 */

String Modifiers():
{
  Token t;
  String modificateur = "";
}
{
 (
  LOOKAHEAD(2)
  (
   t = <PUBLIC> { modificateur = t.toString();}
  |
   t = <STATIC> 
  |
   t = <PROTECTED> { modificateur = t.toString();}
  |
   t = <PRIVATE> { modificateur = t.toString();}
  |
   t = <FINAL> 
  |
   t = <ABSTRACT> 
  |
   t = <SYNCHRONIZED>
  |
   t = <NATIVE> 
  |
   t = <TRANSIENT> 
  |
   t = <VOLATILE>
  |
   t = <STRICTFP> 
  |
   Annotation(){ modificateur = "";}
  )
 )*
 { return modificateur;}
}

/*
 * Declaration syntax follows.
 */

// Handle classes, interfaces, enums, and annotations.
void TypeDeclaration():
{
}
{
          ";"
        |
          modifier = Modifiers()
          (
              LOOKAHEAD(2)
             ClassOrInterfaceDeclaration()
           | 
             EnumDeclaration()
           | 
             AnnotationTypeDeclaration()
          )
}

void ClassOrInterfaceDeclaration():
{
  Token t;
}
{
    
      ( 
          "class" | "interface" 
      )
      //Obtenir le nom de la classe ou interface
      t = <IDENTIFIER>
      //Le premier indentifier obtenu est le nom de cette classe, donner le nom a 'nom_classe'
      //Mettre le 'name' true pour interdire donner le nom des classes internes a 'nom_classe'
      { if(named == false && modifier.equals("public") && !permanent.contains(t.toString()) && i == 0)
         {
           permanent.add(t.toString());
    	   permanent_class.put(folder_parent,new ArrayList<String>(permanent));
         }
            
      }
      { if(named == false) { nom_Classe = t.toString(); named = true;}}
      [ TypeParameters() ]
      [ ExtendsList() ]
      [ ImplementsList() ]
      ClassOrInterfaceBody()

      /* danson, added this check for trailing semi-colon.  Apparently, this has been
      legal since the beginning of Java, some sort of a C hold-over.  Sun's latest
      Java 1.5 compiler doesn't mind it, but this parser whined if the class has a
      semi-colon after the last }. */
      [ LOOKAHEAD(2) <SEMICOLON> ]
}

void ExtendsList():
{
}
{
  		//Cette methode 'ExtendsList' est entree signifie que cette classe a une classe parent
       { hasParent = true;}
       //Clean le stringbuilder
       { sb.setLength(0); }
       //Le nom de la classe parent va etre ajoute dans stringbuilder par methode 'ClassOrInterfaceType()'
       "extends" ClassOrInterfaceType() { classe_Parent = sb.toString(); sb.setLength(0);}
       
       //Une classe peut extend plusieur classe sans interface...?
       ( "," ClassOrInterfaceType())*
       //Close it
       { hasParent = false;}

}

void ImplementsList():
{
}
{
        "implements" ClassOrInterfaceType()
       ( "," ClassOrInterfaceType() )*
       //Pour eviter l'ajout de nom d'interface dans le stringbuilder
       { sb.setLength(0); }

}

void EnumDeclaration():
{
}
{
    
        "enum" <IDENTIFIER>
        [ ImplementsList() ]
        EnumBody()

}

void EnumBody():
{
}
{
    
        "{"
        EnumConstant() ( LOOKAHEAD(2) "," EnumConstant() )* [","]
        [ ";" ( ClassOrInterfaceBodyDeclaration() )* ]
        "}"
}

void EnumConstant():
{
}
{
    
        <IDENTIFIER> [ Arguments() ] [ ClassOrInterfaceBody() ]
}

void TypeParameters():
{
}
{
    
        (
            "<"
            (
            TypeParameter()
            )?
            (
                ","
                TypeParameter()
            )*
            ">"
        )
}

void TypeParameter():
{
}
{
    
        (
            <IDENTIFIER> [ TypeBound() ]
        )

}

void TypeBound():
{
}
{
    

        (
            "extends"
            ClassOrInterfaceType()
            (
                "&"
                ClassOrInterfaceType()
            )*
        )
}

void ClassOrInterfaceBody():
{
}
{
    

        (
            "{"
            (
                ClassOrInterfaceBodyDeclaration()
            )*
            "}"
        )
}

void ClassOrInterfaceBodyDeclaration():
{
  String str;
  int cnt;
}
{
    
          (
          LOOKAHEAD(2)
          Initializer()
        |
          str = Modifiers() // Just get all the modifiers out of the way. If you want to do
                      // more checks, pass the modifiers down to the member
              //Donner une valeur a l'attribut 'portee' selon le type qui correspond a l'index dans le 'cnt_Portee'
              { if(str.equals("public"))
                {
                  portee = 0;
                }
                else if(str.equals("private"))
                {
                  portee = 1;
                }else if(str.equals("protected"))
                {
                  portee = 2;
                }else
                {
                  portee = 3;
                }
              }
          (
              LOOKAHEAD(3)
              ClassOrInterfaceDeclaration()
            |
              EnumDeclaration()
            |
              LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
              ConstructorDeclaration()
            |
              LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
              { asso_Getter = true;}     
              FieldDeclaration()
            |
              LOOKAHEAD(2)
              AnnotationTypeDeclaration()
            |
              { asso_Getter = false;}
              { portee = 3; }
              MethodDeclaration()

          )
        |
          ";"  
          )
}

void FieldDeclaration():
{
}
{
        (
            // Modifiers are already matched in the caller
            Type() VariableDeclarator()
            (
                "," VariableDeclarator() 
            )*
            ";"
        )
}

void VariableDeclarator():
{
}
{
        (
            VariableDeclaratorId() [ "=" VariableInitializer() ]
        )
        //cnt_Attributs[0]: Attribut total;
        //cnt_Attributs[1]: Attribut simple;
        //cnt_Attributs[2]: Attribut reference; 
        { cnt_Attributs[0]++;}
        { if(isSimple == true)
          {
            cnt_Attributs[1]++;
          }else if(isSimple == false)
          {
        
            cnt_Attributs[2]++;
          }
        }
        //Selon le modifier, counter correspondante ++
        { if(portee!=3) cnt_Portee[portee]++;
      }
}

void VariableDeclaratorId():
{
}
{
  		{ att_class_name = token.image;
  		} 
        <IDENTIFIER> 
        ( 
            "[" "]" 
        )*
  		{ att_class.put(token.image, att_class_name); } 
}

void VariableInitializer():
{
}
{
    

          ArrayInitializer()
        |
          Expression()
}

void ArrayInitializer():
{
}
{
    

        "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"

}

void MethodDeclaration():
{
}
{
    
        (
          // Modifiers already matched in the caller!
          [ TypeParameters() ]
          ResultType()
          MethodDeclarator() [ "throws" NameList() ]
          ( Block() | ";" )
        )
}

void MethodDeclarator():
{
}
{
    
        (
            <IDENTIFIER> FormalParameters() ( "[" "]" )*
        )
}

void FormalParameters():
{
}
{
    
        (
         "("
         [
              FormalParameter()
              (
                  ","
                  FormalParameter()
              )*
         ]
         ")"
        )
}

void FormalParameter():
{
}
{
    
      (
        Modifiers()
        Type()
       [
        <ELLIPSIS>  // ...
       ]
       VariableDeclaratorId()
      )
}

void ConstructorDeclaration():
{
}
{
    
        (
            [ Annotation() ]
            [ TypeParameters() ]
            <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
            "{"
                [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
            ( BlockStatement() )*
            "}"
        )
}

void ExplicitConstructorInvocation():
{
}
{
    
          LOOKAHEAD("this" Arguments() ";")
          "this" Arguments() ";"
        |
        [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer():
{
}
{
    
        [ <STATIC> ] Block()
}

void Type():
{
  String str = "";
}
{
    
        (
         LOOKAHEAD(2) ReferenceType()
         //type non simple
         {isSimple = false;}
         //Si le getter des associations est vrai et cette type n'existe pas dans arraylist, l'ajouter
         { if(!asso.contains(sb.toString()) && asso_Getter == true)asso.add(sb.toString());}
         { if(!list_class.containsKey(sb.toString()) && add_list_class == true) list_class.put(sb.toString(),0);}
         { sb.setLength(0);}
        |
         PrimitiveType()
         //type simple
         {isSimple = true;}
         //Si le getter des associations est vrai et cette type n'existe pas dans arraylist, l'ajouter
         { sb.setLength(0);}
        )
}

void ReferenceType():
{
  String str = "";
}
{
        (
            LOOKAHEAD(3)
            //Pour les type comme: String[][], int[], etc.
            PrimitiveType()
            ( LOOKAHEAD(2) "[" "]" { sb.append("[]");})+
        |
        ( ClassOrInterfaceType() )
        ( LOOKAHEAD(2) "[" "]"{ sb.append("[]");})*
        )
}

void ClassOrInterfaceType():
{
  Token t;
}
{
  
         (
          t = <IDENTIFIER> 
          { sb.append(t.toString());}
          [  LOOKAHEAD(2)  TypeArguments()]
          ( LOOKAHEAD(2) "." 
              t = <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments()]
              { sb.setLength(0);}
              { sb.append(t.toString());}
          )*
        )
        
}

void TypeArguments():
{
}
{
        (
         <DIAMOND>
         { sb.append("<>");}
        )
        |
        (
        "<"
        { sb.append("<");}
        TypeArgument() 

        ( ","
		 { sb.append(",");}
         TypeArgument() )*
         ">"
         { sb.append(">");}
        )
}

void TypeArgument():
{
}
{
        (
           ReferenceType()
         |
         "?" [ WildcardBounds() ]
        )
}

void WildcardBounds():
{
}
{
    
        (
        "extends" ReferenceType()
     |
        "super" ReferenceType() 
        )
}

void PrimitiveType():
{
}
{
    
        (
              "boolean"
              { sb.append("boolean");}
            |
              "char"
              { sb.append("char");}
            | 
              "byte"
              { sb.append("byte");}
            | 
              "short"
              { sb.append("short");}
            | 
              "int"
              { sb.append("int");}
            | 
              "long"
              { sb.append("long");}
            | 
              "float"
              { sb.append("float");}
            | 
              "double"
              { sb.append("double");}
        )
}


void ResultType():
{
}
{
    

          (
          "void"
        |
          Type()
          )
}

void Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
}
{
        <IDENTIFIER>
        {
				if (att_class.get(token.image) != null && list_class.get(att_class.get(token.image)) != null)
				{
					list_class.put(att_class.get(token.image),(list_class.get(att_class.get(token.image)) + 1));
				}else if(list_class.get(token.image) != null)
				{
					list_class.put(token.image,(list_class.get(token.image) + 1));
				}
			}
        (
         	 
            LOOKAHEAD(2)
            "." <IDENTIFIER>
        )*
}

void NameList():
{
}
{
    
        Name() 
        ( "," Name() )*   
}


/*
 * Expression syntax follows.
 */

void Expression():
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{
}
{
    
          ConditionalExpression()
          [
            LOOKAHEAD(2)
            AssignmentOperator() Expression()
          ]
}

void AssignmentOperator():
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}

void ConditionalExpression():
{
}
{
    
        ConditionalOrExpression() [ "?" Expression() ":" Expression() ]
}

void ConditionalOrExpression():
{
}
{
    
        ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{
}
{
    
        InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{
}
{
    
        ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{
}
{
    
        AndExpression() ( "^" AndExpression() )*
}

void AndExpression():
{
}
{
    
        EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression():
{
}
{
    
        InstanceOfExpression() ( ( "==" | "!=" ) InstanceOfExpression() )*
}

void InstanceOfExpression():
{
}
{
    
        RelationalExpression() [ "instanceof" Type() ]
}

void RelationalExpression():
{
}
{
    
        ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression():
{
}
{
    
        AdditiveExpression() ( ( "<<" | RSIGNEDSHIFT() | RUNSIGNEDSHIFT() ) AdditiveExpression() )*
}

void AdditiveExpression():
{
}
{
    
        MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{
}
{
    
        UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():
{
}
{
    
          ( "+" | "-" ) UnaryExpression()
        |
          PreIncrementExpression()
        | 
          PreDecrementExpression()
        | 
          UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{
}
{
    
        "++" PrimaryExpression()
}

void PreDecrementExpression():
{
}
{
    
        "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{
}
{
    
          ( "~" | "!" ) UnaryExpression()
        |
          LOOKAHEAD( CastLookahead() )
          CastExpression()
        |
          PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead():
{
}
{
    
          LOOKAHEAD(2)
          "(" PrimitiveType()
        |
          LOOKAHEAD("(" Type() "[")
          "(" Type() "[" "]"
        |
          "(" Type() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression():
{
}
{
    
        PrimaryExpression() [ "++" | "--" ]
}

void CastExpression():
{
}
{
    
          LOOKAHEAD("(" PrimitiveType())
          "(" Type() ")" UnaryExpression()
        |
          "(" Type() ")" UnaryExpressionNotPlusMinus()
}

/**
 * JLS 15.8 Primary Expressions
 * Primary expressions include most of the simplest kinds of expressions, from
 * which all others are constructed: literals, class literals, field accesses,
 * method invocations, and array accesses. A parenthesized expression is also
 * treated syntactically as a primary expression.
 */
void PrimaryExpression():
{
}
{
    
        PrimaryPrefix()
        ( LOOKAHEAD(2)
            PrimarySuffix()
        )*
}

void MemberSelector():
{
}
{
    
        "." TypeArguments() <IDENTIFIER>
}

void PrimaryPrefix():
{
}
{
    
          Literal()
        |
          "this"
        |
          "super" "." <IDENTIFIER>
        |
          LOOKAHEAD( ClassOrInterfaceType() "." <IDENTIFIER> )
          ClassOrInterfaceType()"." <IDENTIFIER>
        |
          LOOKAHEAD( ClassOrInterfaceType() "." "super" "." <IDENTIFIER> )
          ClassOrInterfaceType() "." "super" "." <IDENTIFIER>
        |
            "(" Expression() ")"
        |
        	{ add_list_class = false; }
            AllocationExpression()
            
        |
          LOOKAHEAD( ResultType() "." "class" )
          ResultType() "." "class"
        |
          Name()
}

void PrimarySuffix():
{
}
{
    
          LOOKAHEAD(2)
          "." "this"
        |
          LOOKAHEAD(2)
          { add_list_class = false;}
          "." AllocationExpression()
          { add_list_class = true;}
        |
          LOOKAHEAD(3)
          MemberSelector()
        |
          "[" Expression() "]"
        |
          "." <IDENTIFIER>
        |
          Arguments()
}

void Literal():
{}
{
    
          <INTEGER_LITERAL>
        |
          <FLOATING_POINT_LITERAL>
        |
          <CHARACTER_LITERAL>
        |
          <STRING_LITERAL>
        |
          BooleanLiteral()
        |
          NullLiteral()
}

void BooleanLiteral():
{}
{
  "true"
|
  "false"
}

void NullLiteral():
{}
{
  "null"
}

void Arguments():
{
}
{
    
        "(" [ ArgumentList() ] ")"
}

void ArgumentList():
{
}
{
    
        Expression() ( "," Expression() )*
}

void AllocationExpression():
{
}
{
    
          LOOKAHEAD(2)
          "new" PrimitiveType() ArrayDimsAndInits() 
        |
          "new" ClassOrInterfaceType() [ TypeArguments() ]
            (
                ArrayDimsAndInits() 
            |
                Arguments() [ ClassOrInterfaceBody() ]
            )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits():
{
}
{
    
          LOOKAHEAD(2)
          ( LOOKAHEAD(2) "["  Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
        |
          ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

void Statement():
{
}
{
    
          (
          LOOKAHEAD(2)
          LabeledStatement()
        |
          AssertStatement()
        |
          Block()
        |
          EmptyStatement()
        |
          StatementExpression() ";"
        |
          SwitchStatement()
        |
          IfStatement()
        |
          WhileStatement()
        |
          DoStatement()
        |
          ForStatement()
        |
          BreakStatement()
        |
          ContinueStatement()
        |
          ReturnStatement()
        |
          ThrowStatement()
        |
          SynchronizedStatement()
        |
          TryStatement()
          )

}

void AssertStatement():
{}
{
    
        "assert" Expression() [ ":" Expression() ] ";"
}

void LabeledStatement():
{}
{
    
        <IDENTIFIER> ":" Statement()
}

void Block():
{
}
{
    
        "{" ( BlockStatement() )* "}"
}

void BlockStatement():
{
}
{
    
        [LOOKAHEAD(2) Annotation()]
            (
          LOOKAHEAD( Modifiers() Type() <IDENTIFIER>)
          LocalVariableDeclaration() ";"
        |
          LOOKAHEAD(3)
          Statement()
        |
          ClassOrInterfaceDeclaration()
             )
}

void LocalVariableDeclaration():
{

}
{
    
      // old -- [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
      // new -- Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*

      [LOOKAHEAD(2) Annotation()] Modifiers() Type() VariableDeclarator()
      ( "," VariableDeclarator()
      )*
}

void EmptyStatement():
{}
{
  ";"
}

void StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
}
{
    
          PreIncrementExpression()
        |
          PreDecrementExpression()
        |
          PrimaryExpression()
          [
            "++"
          |
            "--"
          |
            AssignmentOperator() Expression()
          ]
}

void SwitchStatement():
{
}
{
    
        "switch" "(" Expression() ")" "{"
            ( SwitchLabel() ( BlockStatement() )* )*
      "}"

}

void SwitchLabel():
{
}
{
    
          "case" Expression() ":"
        |
          "default" ":"
}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
}
{
    
        "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]

}

void WhileStatement():
{
}
{
    
        "while" "(" Expression() ")" Statement()
}

void DoStatement():
{
}
{
    
        "do" Statement() "while" "(" Expression() ")" ";"

}

void ForStatement():
{
}
{
    
      "for" "("

      (
          LOOKAHEAD([Annotation()]["final"] Type() <IDENTIFIER> ":")
          [LOOKAHEAD(2) Annotation()]["final"] Type() <IDENTIFIER> ":" Expression()
        |
         [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
      )

      ")" Statement()

}

// TODO: what is this? It doesn't appear to be called from anywhere. It's in the
// JLS, but not used, rather, all modifiers are captured in the Modifiers production.
void VariableModifier() :
{}
{
    [LOOKAHEAD(2) Annotation()] ["final"]   
}

void ForInit():
{
}
{
    
          LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
          LocalVariableDeclaration() 
        |
        StatementExpressionList() 
}

void StatementExpressionList():
{
}
{
    
        StatementExpression() ( "," StatementExpression() )*
}

void ForUpdate():
{}
{
    
        StatementExpressionList()
}

void BreakStatement():
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement():
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

void ReturnStatement():
{
}
{
    
        "return" [ Expression() ] ";"
}

void ThrowStatement():
{
}
{
    
        "throw" Expression() ";"
}

void SynchronizedStatement():
{
}
{
    
        <SYNCHRONIZED> "(" Expression() ")" Block()

}

void TryStatement():
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
 // DONE: Java 7 allows try with resources, where the resource implements Closeable.
 // e.g.
 // try (BufferedReader br = new BufferedReader(new FileReader(path))) {
 //   return br.readLine();
 // }
 // Note that neither 'catch' nor 'finally' are required in this case.
 //
 // DONE: Java 7 allows 'catch' to handle more than one exception type, e.g.
 // catch (IOException|SQLException ex)
{
}
{
    
        "try" ["(" LocalVariableDeclaration()(LOOKAHEAD(2) ";" LocalVariableDeclaration())* [";"] ")"]
        Block() 
        ( "catch" "(" 
                        (
                            LOOKAHEAD(3)
                            FormalParameter() 
                            |
                            ClassOrInterfaceType()(LOOKAHEAD(2) "|" ClassOrInterfaceType())+ VariableDeclaratorId()
                        )
                  ")" 
            Block()
        )*
        
        [ "finally" 
            Block()
        ]
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */

void RUNSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT} )
   ">" ">" ">"
  )
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                 getToken(1) instanceof Token.GTToken &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

/* Annotation syntax follows. */

void Annotation():
{
}
{
    
   LOOKAHEAD( "@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
   NormalAnnotation()
 |
   LOOKAHEAD( "@" Name() "(" )
   SingleMemberAnnotation()
 |
   MarkerAnnotation()
}

void NormalAnnotation():
{
}
{
    
        "@" Name() "(" [ MemberValuePairs() ] ")"
}

void MarkerAnnotation():
{
}
{
    
        "@" Name()
}

void SingleMemberAnnotation():
{
}
{
    
        "@" Name() "(" MemberValue() ")"
}

void MemberValuePairs():
{
}
{
    
    MemberValuePair() ( "," MemberValuePair() )*
}

void MemberValuePair():
{
}
{
    
    <IDENTIFIER> "=" MemberValue()
}

void MemberValue():
{
}
{
    
           LOOKAHEAD(2)
           Annotation()      
         |
           MemberValueArrayInitializer()
         |
           ConditionalExpression()
}

void  MemberValueArrayInitializer():
{
}
{
    
    "{" (MemberValue() ( LOOKAHEAD(2) "," MemberValue() )* [ "," ])? "}"
}


/* Annotation Types. */

void AnnotationTypeDeclaration():
{
}
{
    
        "@" "interface" <IDENTIFIER> AnnotationTypeBody()
}

void AnnotationTypeBody():
{
}
{
    
    "{" ( AnnotationTypeMemberDeclaration() )* "}"
}

void AnnotationTypeMemberDeclaration():
{
}
{
 Modifiers()
 
     (
         LOOKAHEAD(Type() <IDENTIFIER> "(")
         Type() <IDENTIFIER> "(" ")" [ DefaultValue() ] ";" 
         |
         LOOKAHEAD(3)
         ClassOrInterfaceDeclaration()
         |
         EnumDeclaration()
         |
         LOOKAHEAD(2)
         AnnotationTypeDeclaration()
         |
         FieldDeclaration()
     )
     |
     ( ";" )
}

void DefaultValue():
{
}
{
    
        "default" MemberValue()
}